<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
                Írj olyan C programot, amely kiszámolja a Mandelbrot halmazt!  
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Ebben a feladatban Dékány Róbert Zsoltot tutoriáltam.                
        </para>

	<programlisting language="c">
        <![CDATA[
   #include <iostream>
#include "png++/png.hpp"
#include <sys/times.h>

#define MERET 600
#define ITER_HAT 32000

void
mandel (int kepadat[MERET][MERET]) {

    // Mérünk időt (PP 64)
    clock_t delta = clock ();
    // Mérünk időt (PP 66)
    struct tms tmsbuf1, tmsbuf2;
    times (&tmsbuf1);

    // számítás adatai
    float a = -2.0, b = .7, c = -1.35, d = 1.35;
    int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

    // a számítás
    float dx = (b - a) / szelesseg;
    float dy = (d - c) / magassag;
    float reC, imC, reZ, imZ, ujreZ, ujimZ;
    // Hány iterációt csináltunk?
    int iteracio = 0;
    // Végigzongorázzuk a szélesség x magasság rácsot:
    for (int j = 0; j < magassag; ++j)
    {
        //sor = j;
        for (int k = 0; k < szelesseg; ++k)
        {
            // c = (reC, imC) a rács csomópontjainak
            // megfelelő komplex szám
            reC = a + k * dx;
            imC = d - j * dy;
            // z_0 = 0 = (reZ, imZ)
            reZ = 0;
            imZ = 0;
            iteracio = 0;
            // z_{n+1} = z_n * z_n + c iterációk
            // számítása, amíg |z_n| < 2 vagy még
            // nem értük el a 255 iterációt, ha
            // viszont elértük, akkor úgy vesszük,
            // hogy a kiinduláci c komplex számra
            // az iteráció konvergens, azaz a c a
            // Mandelbrot halmaz eleme
            while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
            {
                // z_{n+1} = z_n * z_n + c
                ujreZ = reZ * reZ - imZ * imZ + reC;
                ujimZ = 2 * reZ * imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;

            }

            kepadat[j][k] = iteracio;
        }
    }

    times (&tmsbuf2);
    std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
              + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

    delta = clock () - delta;
    std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}

int
main (int argc, char *argv[])
{

    if (argc != 2)
    {
        std::cout << "Hasznalat: ./mandelpng fajlnev";
        return -1;
    }

    int kepadat[MERET][MERET];

    mandel(kepadat);

    png::image < png::rgb_pixel > kep (MERET, MERET);

    for (int j = 0; j < MERET; ++j)
    {
        //sor = j;
        for (int k = 0; k < MERET; ++k)
        {
            kep.set_pixel (k, j,
                           png::rgb_pixel (255 -
                                           (255 * kepadat[j][k]) / ITER_HAT,
                                           255 -
                                           (255 * kepadat[j][k]) / ITER_HAT,
                                           255 -
                                           (255 * kepadat[j][k]) / ITER_HAT));
        }
    }

    kep.write (argv[1]);
    std::cout << argv[1] << " mentve" << std::endl;

}]]>
</programlisting>

	<para>
	Az egész csokorban hasznos lesz tudni a Mandelbrot "fogalmat", hogy mivel foglalkozik. Alapvetően komplex számokkal dolgozik egyenletkben. A megoldásban szereplő számokat "összekötve" egy képet fogunk kapni. Ebből kilogikázatjuk, hogy kapni fogunk egy kimenő fájlt amibe a megoldás lesz illetve egy képet is külön fájlban. Ezért szükséges a csokor elején telepíteni "png++"-t. Sudo apt segítségével tudjuk ezt megtenni. Miután ezt megtettük és utána néztünk több forrásból, hogy hogyan müködik ez pontosan el is kezdhetjük a feladatokat megcsinálni. Létrefogjuk hozni a képteret (min,max értékekkel). Maga a program további kódcsipetei annyiból állnak, hogy a kijtt számok(halmaz) segítségével kirajzoltatunk egy képet, ezt a képet úgy kapjuk meg, hogy pixelről-pixelre rajzoltatja ki a gép.
	</para>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
                
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
	<programlisting language="c">
        <![CDATA[
#include <png++/png.hpp>
#include <complex>

const int N = 500;
const int M = 500;
const double MAXX = 0.7;
const double MINX = -2.0;
const double MAXY = 1.35;
const double MINY = -1.35;

void GeneratePNG(const int tomb[N][M])
{
    png::image< png::rgb_pixel > image(N, M);
    for (int x = 0; x < N; x++)
    {
        for (int y = 0; y < M; y++)
        {
            image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
        }
    }
    image.write("kimenet.png");
}

int main()
{
    int tomb[N][M];

    double dx = (MAXX - MINX) / N;
    double dy = (MAXY - MINY) / M;

    std::complex<double> C, Z, Zuj;

    int iteracio;

    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++)
        {
            real(C) = MINX + j * dx;
            imag(C) = MAXY - i * dy;

            Z = 0;
            iteracio = 0;

            while(abs(Z) < 2 && iteracio++ < 255)
            {
                Zuj = Z*Z+C;
                Z = Zuj;
            }

            tomb[i][j] = 256 - iteracio;
        }
    }

    GeneratePNG(tomb);

    return 0;
}

        ]]>
</programlisting>
	<para>
	Mint ahogy láthatjuk sok hasonlóság van ez elöző feladathoz képest viszont van amiben eltér mint például, hogy itt már az " std::complex" osztállyal fogunk dolgozni. Az "std::complex" osztály már tud kezelni komplex számokat ezálltal ez megkönnyíti a munkánkat.  Ez annyiba fogja megváltoztatni, hogy nem kell saját magunknak írni egy struktúrát. Ezenfelül szinte ugyan az az elöző feladatban kitagláltakhoz.
	</para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
	<programlisting language="c">
        <![CDATA[
            // Verzio: 3.1.3.cpp
            // Forditas:
            // g++ 3.1.3.cpp -lpng -O3 -o 3.1.3
            // Futtatas:
            // ./3.1.3 bmorf.png 800 800 10 -2 2 -2 2 .285 0 10
            // Nyomtatas:
            // a2ps 3.1.3.cpp -o 3.1.3.cpp.pdf -1 --line-numbers=1  --left-footer="BATF41 HAXOR STR34M" --right-footer="https://bhaxor.blog.hu/" --pro=color
            // ps2pdf 3.1.3.cpp.pdf 3.1.3.cpp.pdf.pdf
            // 
            // BHAX Biomorphs
            // Copyright (C) 2019
            // Norbert Batfai, batfai.norbert@inf.unideb.hu
            //
            //  This program is free software: you can redistribute it and/or modify
            //  it under the terms of the GNU General Public License as published by
            //  the Free Software Foundation, either version 3 of the License, or
            //  (at your option) any later version.
            //
            //  This program is distributed in the hope that it will be useful,
            //  but WITHOUT ANY WARRANTY; without even the implied warranty of
            //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            //  GNU General Public License for more details.
            //
            //  You should have received a copy of the GNU General Public License
            //  along with this program.  If not, see <https://www.gnu.org/licenses/>.
            //
            // Version history
            //
            // https://youtu.be/IJMbgRzY76E
            // See also https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf
            //
            #include <iostream>
            #include "png++/png.hpp"
            #include <complex>
            int
            main ( int argc, char *argv[] )
            {
                int szelesseg = 1920;
                int magassag = 1080;
                int iteraciosHatar = 255;
                double xmin = -1.9;
                double xmax = 0.7;
                double ymin = -1.3;
                double ymax = 1.3;
                double reC = .285, imC = 0;
                double R = 10.0;
                if ( argc == 12 )
                {
                    szelesseg = atoi ( argv[2] );
                    magassag =  atoi ( argv[3] );
                    iteraciosHatar =  atoi ( argv[4] );
                    xmin = atof ( argv[5] );
                    xmax = atof ( argv[6] );
                    ymin = atof ( argv[7] );
                    ymax = atof ( argv[8] );
                    reC = atof ( argv[9] );
                    imC = atof ( argv[10] );
                    R = atof ( argv[11] );
                }
                else
                {
                    std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
                    return -1;
                }
                png::image < png::rgb_pixel > kep ( szelesseg, magassag );
                double dx = ( xmax - xmin ) / szelesseg;
                double dy = ( ymax - ymin ) / magassag;
                std::complex<double> cc ( reC, imC );
                std::cout << "Szamitas\n";
                // j megy a sorokon
                for ( int y = 0; y < magassag; ++y )
                {
                    // k megy az oszlopokon
                    for ( int x = 0; x < szelesseg; ++x )
                    {
                        double reZ = xmin + x * dx;
                        double imZ = ymax - y * dy;
                        std::complex<double> z_n ( reZ, imZ );
                        int iteracio = 0;
                        for (int i=0; i < iteraciosHatar; ++i)
                        {
                            z_n = std::pow(z_n, 3) + cc;
                            //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                            if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                            {
                                iteracio = i;
                                break;
                            }
                        }
                        kep.set_pixel ( x, y,
                                        png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
                    }
                    int szazalek = ( double ) y / ( double ) magassag * 100.0;
                    std::cout << "\r" << szazalek << "%" << std::flush;
                }
                kep.write ( argv[1] );
                std::cout << "\r" << argv[1] << " mentve." << std::endl;
            }
        ]]>
</programlisting>
	<para>
	Clifford Pickover találta fel a bioformokat a Julia halmazokat rajzoló programon dolgozott mikor csodálatos módon egy bug miatt rátalált a bioformokra. Az ilyenfajta szabályrendszer szerint valósulnak meg az egysejtűek. Ez a két halmaz között annyi a különbség, hogy míg a mandel brotban a "c" az egy konstants addig a másiknál egy állandó. Itt is a szélesség és a magasság a felhasználó álltal adott érték lesz mint az elöző két feladatnál. 
	</para>                       
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
	<programlisting language="c">
        <![CDATA[
            // Forrás: https://github.com/SullyChen/Mandelbrot-Set-Plotter
            #include "SFML/Graphics.hpp"
            //resolution of the window
            const int width = 1280;
            const int height = 720;
            //used for complex numbers
            struct complex_number
            {
                long double real;
                long double imaginary;
            };
            //mandelbrot komplex alapján legenerál egy mandelbrot halmazt
            void generate_mandelbrot_set(sf::VertexArray& vertexarray, int pixel_shift_x, int pixel_shift_y, int precision, float zoom)
            {
                #pragma omp parallel for
                for(int i = 0; i < height; i++)
                {
                    for (int j = 0; j < width; j++)
                    {
                        //scale the pixel location to the complex plane for calculations
                        long double x = ((long double)j - pixel_shift_x) / zoom;
                        long double y = ((long double)i - pixel_shift_y) / zoom;
                        complex_number c;
                        c.real = x;
                        c.imaginary = y;
                        complex_number z = c;
                        int iterations = 0; //keep track of the number of iterations
                        for (int k = 0; k < precision; k++)
                        {
                            complex_number z2;
                            z2.real = z.real * z.real - z.imaginary * z.imaginary;
                            z2.imaginary = 2 * z.real * z.imaginary;
                            z2.real += c.real;
                            z2.imaginary += c.imaginary;
                            z = z2;
                            iterations++;
                            if (z.real * z.real + z.imaginary * z.imaginary > 4)
                                break;
                        }
                        //color pixel based on the number of iterations
                        if (iterations < precision / 4.0f)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(iterations * 255.0f / (precision / 4.0f), 0, 0);
                            vertexarray[i*width + j].color = color;
                        }
                        else if (iterations < precision / 2.0f)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(0, iterations * 255.0f / (precision / 2.0f), 0);
                            vertexarray[i*width + j].color = color;
                        }
                        else if (iterations < precision)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(0, 0, iterations * 255.0f / precision);
                            vertexarray[i*width + j].color = color;
                        }
                    }
                }
            }
        ]]>
</programlisting>
	<para>
	Maga a CUDA eléggé elterjed manapság a gamerek és a videósok körében. Mivel nem elég, hogy egy játék elfut már arra is nagy hangsúlyt fektetnek, hogy milyen minőségben fut az el. A CUDA ebben segédkezik leginkább mivel egyszerre több magot futtat a videókártyán ezálltal nagyob teljesítményre képest a számítógép. A kód itt is hasonlít az elözőekhez, a legnagyobb eltérés viszont ott van amikor is itt a CUDA magjai számolják ki a megoldást míg az elözőeknél a CPU számolta. Mint ahogy írtam ezálltal jóval gyorsabb a folyamat.
	</para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
            
        <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: 
        </para>
<programlisting language="c">
        <![CDATA[
            // Forrás: https://github.com/SullyChen/Mandelbrot-Set-Plotter
            #include "SFML/Graphics.hpp"
            //resolution of the window
            const int width = 1280;
            const int height = 720;
            //used for complex numbers
            struct complex_number
            {
                long double real;
                long double imaginary;
            };
            //mandelbrot komplex alapján legenerál egy mandelbrot halmazt
            void generate_mandelbrot_set(sf::VertexArray& vertexarray, int pixel_shift_x, int pixel_shift_y, int precision, float zoom)
            {
                #pragma omp parallel for
                for(int i = 0; i < height; i++)
                {
                    for (int j = 0; j < width; j++)
                    {
                        //scale the pixel location to the complex plane for calculations
                        long double x = ((long double)j - pixel_shift_x) / zoom;
                        long double y = ((long double)i - pixel_shift_y) / zoom;
                        complex_number c;
                        c.real = x;
                        c.imaginary = y;
                        complex_number z = c;
                        int iterations = 0; //keep track of the number of iterations
                        for (int k = 0; k < precision; k++)
                        {
                            complex_number z2;
                            z2.real = z.real * z.real - z.imaginary * z.imaginary;
                            z2.imaginary = 2 * z.real * z.imaginary;
                            z2.real += c.real;
                            z2.imaginary += c.imaginary;
                            z = z2;
                            iterations++;
                            if (z.real * z.real + z.imaginary * z.imaginary > 4)
                                break;
                        }
                        //color pixel based on the number of iterations
                        if (iterations < precision / 4.0f)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(iterations * 255.0f / (precision / 4.0f), 0, 0);
                            vertexarray[i*width + j].color = color;
                        }
                        else if (iterations < precision / 2.0f)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(0, iterations * 255.0f / (precision / 2.0f), 0);
                            vertexarray[i*width + j].color = color;
                        }
                        else if (iterations < precision)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(0, 0, iterations * 255.0f / precision);
                            vertexarray[i*width + j].color = color;
                        }
                    }
                }
            }
        ]]>
</programlisting>
	<para>
	Mint szinte az összes többi feladatnál itt is van hasonlóság a mandelbrotos feladatokhoz. Egy függvény (void generate_mandelbrot_set(sf::VertexArray vertexarray..) fogja legenerálni MBH_t-t.
	</para>
	<programlisting language="c">
        <![CDATA[
            // Forrás: https://github.com/SullyChen/Mandelbrot-Set-Plotter
            #include "SFML/Graphics.hpp"
            //resolution of the window
            const int width = 1280;
            const int height = 720;
            //used for complex numbers
            struct complex_number
            {
                long double real;
                long double imaginary;
            };
            //mandelbrot komplex alapján legenerál egy mandelbrot halmazt
            void generate_mandelbrot_set(sf::VertexArray& vertexarray, int pixel_shift_x, int pixel_shift_y, int precision, float zoom)
            {
                #pragma omp parallel for
                for(int i = 0; i < height; i++)
                {
                    for (int j = 0; j < width; j++)
                    {
                        //scale the pixel location to the complex plane for calculations
                        long double x = ((long double)j - pixel_shift_x) / zoom;
                        long double y = ((long double)i - pixel_shift_y) / zoom;
                        complex_number c;
                        c.real = x;
                        c.imaginary = y;
                        complex_number z = c;
                        int iterations = 0; //keep track of the number of iterations
                        for (int k = 0; k < precision; k++)
                        {
                            complex_number z2;
                            z2.real = z.real * z.real - z.imaginary * z.imaginary;
                            z2.imaginary = 2 * z.real * z.imaginary;
                            z2.real += c.real;
                            z2.imaginary += c.imaginary;
                            z = z2;
                            iterations++;
                            if (z.real * z.real + z.imaginary * z.imaginary > 4)
                                break;
                        }
                        //color pixel based on the number of iterations
                        if (iterations < precision / 4.0f)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(iterations * 255.0f / (precision / 4.0f), 0, 0);
                            vertexarray[i*width + j].color = color;
                        }
                        else if (iterations < precision / 2.0f)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(0, iterations * 255.0f / (precision / 2.0f), 0);
                            vertexarray[i*width + j].color = color;
                        }
                        else if (iterations < precision)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(0, 0, iterations * 255.0f / precision);
                            vertexarray[i*width + j].color = color;
                        }
                    }
                }
            }
        ]]>
</programlisting>
	<para>
	Legelső lépés "sf::" ablaknál kell beállítani tulajdonságokat (pl.: ablakméret). Ezután lekell generálnunk a MBH-t default paraméterek segítségével. Két állapotot fog figyelni :
1 : Szokásosan várja mikor zárjuk be az ablakot. 2 : Belépve az MBH-ba, 2x nagyítással fogja lefuttatni a fájlt.
	</para>
<programlisting language="c">
        <![CDATA[
            int main()
            {
                sf::String title_string = "Mandelbrot Set Plotter"; //ablak címe
                sf::RenderWindow window(sf::VideoMode(width, height), title_string); //ablak objektum(létrehozza az ablakot a megadott méretekkel és címmel)
                window.setFramerateLimit(30); //frissített ablak/s vagy ilyesmi
                sf::VertexArray pointmap(sf::Points, width * height);
                
                //értékek inicializálása
                float zoom = 300.0f;
                int precision = 100;
                int x_shift = width / 2;
                int y_shift = height / 2;
                
                //legenerálja a mbh-t
                generate_mandelbrot_set(pointmap, x_shift, y_shift, precision, zoom);
                
                
                /**
                * 
                * 
                * 
                * 
                * */
                while (window.isOpen())
                {
                    //ciklikusan figyeli az előforduló különböző event-eket, ha egy olyan esemény következik be, hogy rákattolunk az X gombra, akkor bezárja az ablakot
                    sf::Event event;
                    while (window.pollEvent(event))
                    {
                        if (event.type == sf::Event::Closed)
                            window.close();
                    }
                    
                    //ha a bal egérgommbal kattintunk, akkor az egér helyére nagyít az alábbi algoritmus segítségével. Minden nagyítás után újra legenerálja a mbh-t.
                    //zoom into area that is left clicked
                    if (sf::Mouse::isButtonPressed(sf::Mouse::Left))
                    {
                        sf::Vector2i position = sf::Mouse::getPosition(window);
                        x_shift -= position.x - x_shift;
                        y_shift -= position.y - y_shift;
                        zoom *= 2;
                        precision += 200;
                        
                        #pragma omp parallel for
                        for (int i = 0; i < width*height; i++)
                        {
                            pointmap[i].color = sf::Color::Black;
                        }
                        generate_mandelbrot_set(pointmap, x_shift, y_shift, precision, zoom);
                    }
                    window.clear();
                    window.draw(pointmap);
                    window.display();
                }
                
                return 0;
            }
        ]]>
</programlisting>
	<para>
	
	</para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
	<para>
	Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518</link>
	</para>
	<para>
	Ez az elöző feladat megírása JAVÁ-ban. Itt is megkell adnak a különböző paramétereket. A megoldásnak kapott számok segítségével pixeleket rajzoltatunk ki majd színezünk ki ezálltal kapjuk meg az elvárt képet. Nagyítás során nem történik különösebb változá, ugyan úgy kiszámolja a pixeleket majd kiszinezi őket és így kapjuk meg a képet. 
	</para>
    </section>

</chapter>                
