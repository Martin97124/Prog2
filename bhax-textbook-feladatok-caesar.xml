<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
       <title><type>double **</type> háromszögmátrix</title>
        <para>
            Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/1MRTuKwRsB0">https://youtu.be/1MRTuKwRsB0</link>,
            <link xlink:href="https://youtu.be/RKbX5-EWpzA">https://youtu.be/RKbX5-EWpzA</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Caesar/tm.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tm.c</filename>
            </link> 
        </para>
        <programlisting language="c"><![CDATA[#include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5;
    double **tm;

    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }

    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;	// mi van, ha itt hiányzik a külső ()
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
}]]></programlisting>  
	<para>
	A feladat főcélja a dinamikus memóriakezelés. Legelején tisztázni kell mi is az az alsó háromszögmátrix. Ez egy olyan mátrix melyben a főátló felett csak is 0 számjegy szerepelhet. Legelső lépés a kódcsípet értelmezésében, hogy deklarálnunk kell az "nr" változót amit jelen esetben 5-re tettünk. Ez egyben egyenlő lesz a mátrix sorainak a számával is. Maga a "malloc" függvény memóriát foglalt le ami visszaad egy pointert. Ez a pointer jelen esetünkben bármi lehet(mi válasszuk meg). A harmadik "for" fogja kiíratni az első kettő "forban" létrejött háromszögmátrixot.  Maga a kódcsípetben az "i" a sorok számát míg, a "j" az oszlopok számát mutatja. Azért kell "i+1" mivel így kizárjuk a nullával való osztást. Az utolsó for fogja felszabadítani a helyet a lefoglalt tömbnek. 
	</para>         
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
	<programlisting language="c"><![CDATA[
    #include <stdio.h>
    #include <unistd.h>
    #include <string.h>
    #define MAX_KULCS 100
    #define BUFFER_MERET 256
    int main (int argc, char **argv)
    {
        char kulcs[MAX_KULCS];
        char buffer[BUFFER_MERET];
        int kulcs_index = 0;
        int olvasott_bajtok = 0;
        int kulcs_meret = strlen (argv[1]);
        strncpy (kulcs, argv[1], MAX_KULCS);
        while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
        {
            for (int i = 0; i < olvasott_bajtok; ++i)
            {
            buffer[i] = buffer[i] ^ kulcs[kulcs_index];
            kulcs_index = (kulcs_index + 1) % kulcs_meret;
            }
            write (1, buffer, olvasott_bajtok);
        }
    }
                ]]></programlisting>
	<para>
	Első két sorban felveszünk 2 darab kontstant változót. Egyik a " MAX_KULCS 100 " lesz másik pedig a "BUFFER_MERET 256". Nevükhez hűen a MAX_KULCS a a kulcs maximális méretét fogja megadni míg a "BUFFER_MERET" a beolvasandó stringek számát maximum. Az intben lévő "strncpy" az egy függvény amivel a kulcsok méretét vizsgáljuk meg. Amennyiben túl nagy a kulcs mérete, ekkor 100 kitöröl belőle 100 karakternyi helyet. A "while" ciklus olvassa be a bájtokat. A kiolvasott bájtokat össze EXOR-ozza a kulcs adott bájtja segítségével. A kulcs indexet növeljük az EXOR után. A titkosított bájtokat egy bufferbe olvassuk.
	</para>            
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
	 <programlisting language="java"><![CDATA[
        public class ExorTitkosító
        {
            public ExorTitkosító(String kulcsSzöveg,
                java.io.InputStream bejövőCsatorna,
                java.io.OutputStream kimenőCsatorna)
                throws java.io.IOException {
            byte [] kulcs = kulcsSzöveg.getBytes();
            byte [] buffer = new byte[256];
            int kulcsIndex = 0;
            int olvasottBájtok = 0;
            while((olvasottBájtok =
                    bejövőCsatorna.read(buffer)) != -1) {
                for(int i=0; i<olvasottBájtok; ++i) {
                    buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                    kulcsIndex = (kulcsIndex+1) % kulcs.length;
            }
            
            kimenőCsatorna.write(buffer, 0, olvasottBájtok);
            }
        }
		public static void main(String[] args)
        {
			try
            {
				new ExorTitkosító(args[0], System.in, System.out);
			}
            catch(java.io.IOException e)
            {
				e.printStackTrace();
			}
		}
                ]]></programlisting>   
	<para>
	Az elöző feladat megoldása JAVA környezetben. Viszont van egy fontos eltérés a között ami nem máős minthogy a klcsot a standard inputról kéri be. 
	</para>       
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
	<programlisting language="c"><![CDATA[
        #define MAX_TITKOS 4096
        #define OLVASAS_BUFFER 256
        #define KULCS_MERET 8
        #define _GNU_SOURCE
        #include <stdio.h>
        #include <unistd.h>
        #include <string.h>
        double
        atlagos_szohossz (const char *titkos, int titkos_meret)
        {
        int sz = 0;
        for (int i = 0; i < titkos_meret; ++i)
            if (titkos[i] == ' ')
            ++sz;
        return (double) titkos_meret / sz;
        }
        int
        tiszta_lehet (const char *titkos, int titkos_meret)
        {
        // a tiszta szoveg valszeg tartalmazza a gyakori magyar szavakat
        // illetve az átlagos szóhossz vizsgálatával csökkentjük a
        // potenciális töréseket
        double szohossz = atlagos_szohossz (titkos, titkos_meret);
        return szohossz > 6.0 && szohossz < 9.0
            && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
            && strcasestr (titkos, "az") && strcasestr (titkos, "ha");
        }
        void
        exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
        {
        int kulcs_index = 0;
        for (int i = 0; i < titkos_meret; ++i)
            {
            titkos[i] = titkos[i] ^ kulcs[kulcs_index];
            kulcs_index = (kulcs_index + 1) % kulcs_meret;
            }
        }
        int
        exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
                int titkos_meret)
        {
        exor (kulcs, kulcs_meret, titkos, titkos_meret);
        return tiszta_lehet (titkos, titkos_meret);
        }
        int
        main (void)
        {
        char kulcs[KULCS_MERET];
        char titkos[MAX_TITKOS];
        char *p = titkos;
        int olvasott_bajtok;
        // titkos fajt berantasa
        while ((olvasott_bajtok =
            read (0, (void *) p,
                (p - titkos + OLVASAS_BUFFER <
                MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
            p += olvasott_bajtok;
        // maradek hely nullazasa a titkos bufferben  
        for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
            titkos[p - titkos + i] = '\0';
        // osszes kulcs eloallitasa
        for (int ii = '0'; ii <= '9'; ++ii)
            for (int ji = '0'; ji <= '9'; ++ji)
            for (int ki = '0'; ki <= '9'; ++ki)
            for (int li = '0'; li <= '9'; ++li)
            for (int mi = '0'; mi <= '9'; ++mi)
                for (int ni = '0'; ni <= '9'; ++ni)
                for (int oi = '0'; oi <= '9'; ++oi)
                for (int pi = '0'; pi <= '9'; ++pi)
                {
                    kulcs[0] = ii;
                    kulcs[1] = ji;
                    kulcs[2] = ki;
                    kulcs[3] = li;
                    kulcs[4] = mi;
                    kulcs[5] = ni;
                    kulcs[6] = oi;
                    kulcs[7] = pi;
                    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
                    printf
                    ("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
                    ii, ji, ki, li, mi, ni, oi, pi, titkos);
                    // ujra EXOR-ozunk, igy nem kell egy masodik buffer  
                    exor (kulcs, KULCS_MERET, titkos, p - titkos);
                }
        return 0;
        }
                ]]></programlisting>   
	<para>
	Karakter sorozatból megadott kulcs alapján próbálja visszafejteni az EXOR törő a szöveget. Egy adott algoritmussal (Bruteforce) töri fel minden kombináciot felhasználva. Használnunk kell majd még egy algoritmust ami a tiszta szöveg előállításában segédkezik. Ez az algoritmust alapján egyes szavak alapján próbálja meg összerakni az értelmes szöveget.
	</para>        
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            Ebben a feladatban Dékány Róbert Zsoltot tutoriáltam.
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
<programlisting language="c"><![CDATA[
#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# https://youtu.be/Koyw6IH5ScQ

library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])


a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])
]]></programlisting>
        <para>
            Egy neurális háló elméletben könnyen műküdik, megadjuk, hogy egy adott bemenetre milyen kimenetet adjon vissza. Viszont ez a gyakorlatban egy kicsit nehezebb. Először nézzük a "neurális OR kaput". Ez a logikai vagy. Két db értéket kell megadnunk és a végeredményt majd kijön, hogy hány darab lépésből és mennyi idő alatt sikerült ezt neki elérnie. Másodszor a "neurális AND kaput" nézzük meg. Ez a logikai és. Itt is az elözőhöz mérten megadunk 2db értéket és az eredményt majd megpajuk hány lépésből jött ez ki neki és mennyi idő alatt. A harmadik a "kakuktojás" a három közül azaz az "EXOR", mivel itt is megadjuk a két darab értéket és az eredményt de itt kell hozzá adni egy titkos réteget is. Ez logikában amúgy a kizáró vaggyal felel meg.
        </para>            
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
<programlisting>
         <![CDATA[
#include <iostream>
#include "mlp.hpp"
#include "png++/png.hpp"
int main (int argc, char **argv)
{
    png::image <png::rgb_pixel> png_image (argv[1]);
    int size = png_image.get_width()*png_image.get_height();
    
    Perceptron* p = new Perceptron(3, size, 256, 1);
    double* image = new double[size];
    
    for(int i {0}; i<png_image.get_width(); ++i)
         for(int j {0}; j<png_image.get_height(); ++j)
            image[i*png_image.get_width()+j] = png_image[i][j].red;
    double value = (*p) (image);
    std::cout << value << std::endl;
    delete p;
    delete [] image;
}
 ]]>  
</programlisting> 
	<para>
	A feladat lényege, hogy három rétegű hálót csinálunk majd a 3. rétegben kapni fogunk egy eredményt (számot) amit a három rétegből különböző számításokból kaphatunk meg. Elsősorban behívjuk a képet. Második sorban helyet foglalunk le neki. Késöbbiekben megkell adnunk pár paramétert ilyen a hány réteget haználnuk, méretet, 1 számnak kell lenni a végeredménynek. Ezután megint helyet foglalunk le és feltöltjük for ciklussal végül pedig meghívjuk a fgv. operátort. Ellenőrzés képpen pedig kiíratjuk az eredményt.
	</para>            
    </section>        
        

</chapter>                
