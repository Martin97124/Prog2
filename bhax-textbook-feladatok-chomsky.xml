<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
	<programlisting language="c++">
            <![CDATA[
            #include <iostream>
void tounar(int a){
    for(int i=0; i<a; i++)
        std::cout << "1";
    
    std::cout << std::endl;
}
int main(){
    
    int val;
    std::cout << "Type a number in decimal." << std::endl;
    while(std::cin >> val){
        tounar(val);
    }
    
    return 0;
}
]]>
</programlisting>

	<para>
	Az unáris nem más mint egy számrendszer. Kicsit eltérő mint a rendes mivel itt a legnagyobb szám az egyes. A többi számot úgy kapjuk meg, hogy az egyeseke összeadjuk tehát például a 3-mas számz az 111-ként jön létre. Legelsőnek megvizsgálja azt adott számot a számítógép.  Ezt követően elmegy az utolsó szám utánig. Ezután visszalép egyel és elkezd kivonni mindig 1et belőlük. Ez végig fog menni a számsorozatunkon. Ezeket az egyeseket amiket kivont elmenti és mi majd innen fogjuk tudni megnézni az eredményt.
	</para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
	<programlisting language="tex"><![CDATA[
         S, X, Y változók 
a, b, c konstansok
S - abc, S - aXbc, Xb - bX, Xc - Ybcc, bY - Yb, aY - aaX, aY - aa
	S (S - aXbc)
	aXbc (Xb - bX)
	abXc (Xc - Ybcc)
	abYbcc (bY - Yb)
	aYbbcc (aY - aaX)
	aaXbbcc (Xb - bX)
	aabXbcc (Xb - bX)
	aabbXcc (Xc - Ybcc)
	aabbYbccc (bY - Yb)
	aabYbbccc (bY - Yb)
	aaYbbbccc (aY - aa)
	aaabbbccc 
        ]]></programlisting> 

	<programlisting language="tex"><![CDATA[ 
        A, B, C változók
a, b, c konstansok
A - aAB, A - aC, CB - bCc, cB - Bc, C - bc
	A (A - aAB)
	aAB ( A - aAB)
	aaABB ( A - aAB)
	aaaABBB ( A - aC)
	aaaaCBBB (CB - bCc)
	aaaabCcBB (cB - Bc)
	aaaabCBcB (cB - Bc)
	aaaabCBBc (CB - bCc)
	aaaabbCcBc (cB - Bc)
	aaaabbCBcc (CB - bCc)
	aaaabbbCccc (C - bc)
	aaaabbbbcccc    
               
        ]]></programlisting> 
	<para>
	Mint ahogy láthatjuk megadtunk két darab szabályt is ebből is látszódik, hogy ez a nyelv nem környezetfüggetlen. Mind a két példánál megvannak adva, hogy mik a szimbólumok és a változok és maga a szabályok is.
	</para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
	<programlisting language="c">
        <![CDATA[
    int main()
    {
        for(int i = 0; i < 5; i++)
        {
            .......
        }
        
        return 0;
    }
	 ]]>
	</programlisting>
        <para>
            Az alábbi általunk megírt kód C89 szabványon nem fut le, mivel egy hibaüzenetet kapunk ami szerint a fejlécben nem megengedett a változó deklarációja. C99-es szabványon viszont lefut ez. Természetesen ha a változó deklarálását a kivülre tesszük akkor már lefog futni C89 szabvály szerint. Ennél a feladatnál még szükséges megemlíteni, hogy két kapcsolóra van szükségünk a lefrodításnál, egyik a "-std:c89" másik pedig a "-std:c99.    
        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
	
	<programlisting><![CDATA[
%{
#include <stdio.h>
int realnum = 0;
%}
digit [0-9]
%%
{digit}*(\.{digit}+)? {++realnum_count;
printf("[realnum: %s - %f]",yytext,atof(yytext));}
%%
          ]]></programlisting>
	<para>
	Legelsőnek is írunk egy C kód csipetet amit látni szeretnénk a generált programba. Egy adott részletet a "%" jellel tudunk lezárni lexerben.  Ezután fognak következni a definicók amik jelen esetben számok definiálását fogja jelenteni. Ezután mint az elözőnél lezárjuk a "%" részletet. Ezt követően megadjuk a szabályt ami alapján felismerhetünk bizonyos részleteket.  Jelen esetben csak egy szabályunk van ami a valós számokra fog érvényesülni.
	</para>
	<programlisting><![CDATA[
int main(){
    yylex();
    printf("The number of real numbers: %d",realnum_count);
    return 0;
}
                ]]></programlisting>
	<para>
	Itt már csak a főprogramunk maradt amiben a "yylex()" függvénny segítségével megívjuk a lexerünket és kiíratjuk az eredményt. Ha ezzel megvagyunk nem maradt más dolgunk  mint, hogy beletesszük a flex programba ezt "lex valos.l -o valos.c" paranccsal. Ez a C forráskód jóval hosszabb mint az .l kód ezálltal és látható, hogy megspóroltunk vele némi időt.
	</para>

    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
<programlisting><![CDATA[
%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <time.h>
  #include <ctype.h>

  #define L337SIZE (sizeof l337d1c7 / sizeof (struct cipher))
    
  struct cipher {
    char c;
    char *leet[4];
  } l337d1c7 [] = {

  {'a', {"4", "4", "@", "/-\\"}},
  {'b', {"b", "8", "|3", "|}"}},
  {'c', {"c", "(", "<", "{"}},
  {'d', {"d", "|)", "|]", "|}"}},
  {'e', {"3", "3", "3", "3"}},
  {'f', {"f", "|=", "ph", "|#"}},
  {'g', {"g", "6", "[", "[+"}},
  {'h', {"h", "4", "|-|", "[-]"}},
  {'i', {"1", "1", "|", "!"}},
  {'j', {"j", "7", "_|", "_/"}},
  {'k', {"k", "|<", "1<", "|{"}},
  {'l', {"l", "1", "|", "|_"}},
  {'m', {"m", "44", "(V)", "|\\/|"}},
  {'n', {"n", "|\\|", "/\\/", "/V"}},
  {'o', {"0", "0", "()", "[]"}},
  {'p', {"p", "/o", "|D", "|o"}},
  {'q', {"q", "9", "O_", "(,)"}},
  {'r', {"r", "12", "12", "|2"}},
  {'s', {"s", "5", "$", "$"}},
  {'t', {"t", "7", "7", "'|'"}},
  {'u', {"u", "|_|", "(_)", "[_]"}},
  {'v', {"v", "\\/", "\\/", "\\/"}},
  {'w', {"w", "VV", "\\/\\/", "(/\\)"}},
  {'x', {"x", "%", ")(", ")("}},
  {'y', {"y", "", "", ""}},
  {'z', {"z", "2", "7_", ">_"}},
  
  {'0', {"D", "0", "D", "0"}},
  {'1', {"I", "I", "L", "L"}},
  {'2', {"Z", "Z", "Z", "e"}},
  {'3', {"E", "E", "E", "E"}},
  {'4', {"h", "h", "A", "A"}},
  {'5', {"S", "S", "S", "S"}},
  {'6', {"b", "b", "G", "G"}},
  {'7', {"T", "T", "j", "j"}},
  {'8', {"X", "X", "X", "X"}},
  {'9', {"g", "g", "j", "j"}}
  
// https://simple.wikipedia.org/wiki/Leet
  };
  
%}
%%
.	{
	  
	  int found = 0;
	  for(int i=0; i<L337SIZE; ++i)
	  {
	  
	    if(l337d1c7[i].c == tolower(*yytext))
	    {
	    
	      int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));
	    
          if(r<91)
	        printf("%s", l337d1c7[i].leet[0]);
          else if(r<95)
	        printf("%s", l337d1c7[i].leet[1]);
	      else if(r<98)
	        printf("%s", l337d1c7[i].leet[2]);
	      else 
	        printf("%s", l337d1c7[i].leet[3]);

	      found = 1;
	      break;
	    }
	    
	  }
	  
	  if(!found)
	     printf("%c", *yytext);	  
	  
	}
%%
int 
main()
{
  srand(time(NULL)+getpid());
  yylex();
  return 0;
}
                ]]>
</programlisting>
	<para>
	Ebben a feladatban a szleng nyelvvel fogunk foglalkozni. Különböző betűket tudunk használni akár másik számmal vagy másik szimbólikus karakterekkel is. Ilyen például az S betű helyett a $ vagy E betű helyett a 3. Manapság ezek igen elterjedtek a fiatalok körébe, viszont sokan pedig nem értik ezeket a szleng nyelveket.Maga ez egész feladat érthető és könnyen végigvihető. A kódcsípet első részében megvannak adva az adott betűnek a szlengben használt "jelei". Ezután következik, hogy a nagybetűket kisbetűvé alakítja át a kód és átírjam az első részben vett leet karakterekre. A legvégén pedig egyszerűen csak hivatkozunk rá és meghívjuk. 
	</para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
	<para>Ha a SIGINT nem volt figyelmen kívül hagyva akkor a jelkezelő kezelje.
            Ha figyelmen kívül volt hagyva tövábbra is maradjon úgy.
</para>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting> 
	 <para>A forciklus fejlécébe hiányzik az i deklaráció.</para>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>   
	<para>A forciklus fejlécébe hiányzik az i deklaráció.</para>          
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting> 
	<para>A kód hibamentes ha már létrehoztuk a látható változókat és mutatókat.</para>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>   
	<para>A kód hibamentes ha már létrehoztuk a látható változókat és mutatókat.</para>          
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>      
	<para>Arra kell figyelni hogy ha az f függvény visszatérési értéke nem int akkor a kiírt értékek nem biztos hogy pontosak lesznek.</para>      
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>   
	<para>
			A printf ki fogja írni az f függvény visszatérési értékét a-ra, és a értékét.
</para>          
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>
	<para>
		    A kiiratás megtörténik viszont az f függvény most az a változó memória címévél fog dolgozni nem az a értékével.
</para>             
            </listitem>
        </orderedlist>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            1. sor :  Minden x esetén létezik olyan y amelyik nagyobb az x-nél és prímszám.
        </para>
<para>
            2. sor :  Minden x esetén létezik olyan y amelyik nagyobb az x-nél és prímszám illetve y+2 is.
        </para>
<para>
            3. sor : Létezik y minden x esetén mikor x az prím és kisebb az y-nál.
        </para>
<para>
            4. sor : Létezik y minden x esetén mikor y kisebb mint az x és x az nem prím.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>   
	<programlisting language="c"><![CDATA[
    int a;
	]]></programlisting>                      
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>    
	<programlisting language="c"><![CDATA[
    int *b;
	]]></programlisting>                     
            </listitem>
            <listitem>
                <para>egész referenciája</para> 
	<programlisting language="c"><![CDATA[
    int &c;
	]]></programlisting>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para> 
	<programlisting language="c"><![CDATA[
    int T[3];
	]]></programlisting>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para> 
	<programlisting language="c"><![CDATA[
    int (&TR)[3] = T;
	]]></programlisting>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>    
	<programlisting language="c"><![CDATA[
    int *T[3];
	]]></programlisting>                     
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>  
	<programlisting language="c"><![CDATA[
    int *func();
	]]></programlisting>                       
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>  
	<programlisting language="c"><![CDATA[
    int *(*func)();
	]]></programlisting>                       
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                   
	<programlisting language="c"><![CDATA[
    int *(*func)();
	]]></programlisting>      
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>             
	 <programlisting language="c"><![CDATA[
    int *(*func)();
	]]></programlisting>            
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting> 
	<para>Egész declaráció.</para>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>   
	<para>Pointer, ami az "a" változóra mutat.</para>          
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>   	
	 <para>Az 'a' változó referenciája.</para>          
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>  
	<para>5 elemű tömb deklaráció.</para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>    
	<para>A c tömb referenciája.</para>         
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>  	
	<para>Int-re mutató 5 elemű pointer tömb.</para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>   
	<para>Int-re mutató függvény pointer.</para>          
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>  
	<para>Int-re mutató függvénypointer pointere.</para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>     
	<para>Egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>       
            </listitem>   
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>   
	<para>Függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>          
            </listitem>                      
        </itemizedlist>       
    </section>                     


</chapter>                
