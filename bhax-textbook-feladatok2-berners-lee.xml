<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Berners-Lee!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>C++ és Java összehasonlítás</title>
        <para>
C++: Benedek Zoltán, Levendovszky Tihamér Szoftverfejlesztés C++ nyelven
        </para>
		<para>
Java: Nyékyné Dr. Gaizler Judit et al. Java 2 útikalauz programozóknak 5.0 I-II
		</para>
        <para>
        Két darab könyvet fogok most összehasonlítani. Egyik a „Benedek Zoltán, Levendovszky Tihamér Szoftverfejlesztés C++ nyelven”, míg a másik „Nyékyné Dr. Gaizler Judit et al. Java 2 útikalauz programozóknak 5.0 I-II”.  A Java egy objektumorientált eszközkészletből építkező programozási nyelv amely szabványokat, eszközöket foglal egy rendszerbe. A Java elötti objektumorientált programozási nyelv viszont a C+. Míg magát a Javát széles körben web-alapú,vállalati illetve mobilalkalmazásoknál használják addig a C++ nyelvet „rendszer programozás”-nál általában. Magában a C++ nyelvben van operátor túlterhelés viszont a Javánál ez nem található meg. A pointereknél már kicsit más a helyzet. C++ nyelvben egyértelműen támogatva vannak a pointerek amit akár bele is írhatsz egy adott programban. Javánál nem ilyen egyszerű ez, korlátozott pointer támogatással lehet csak beleírni. Maga a C++ nyelv csak fordítót használ, átkonvertálja a forráskódot gépi kóddá, ezért van az, hogy ez a nyelv ahogy említettem is platformfüggő. A Javánál ez bonyolultabb egy fokkal. Először is átkonvertálja a forráskódot bájtkódra. Ezt követően a „tolmács” futtatja ezt a bájtkódot majd kiad egy kimenetet. Ugyan úgy ahogy említettem ezért platformfüggetlen ez a programozási nyelv. A C++ nyelv támogatja a hívásértéket illetve a hívás referenciát ellenben a JAVA csak a hívásértéket támogatja. C++ ahogy megszokhattuk támogatja a struktúrákat míg a JAVA egyáltalán nem. Viszont a „menettámogatásban” megfordul a kocka. C++-nál nincs beépített segítség erre, egy könyvtárra támaszkodva tudjuk csak ezt véghez vinni. JAVÁ-ban viszont támogatva van és nem kell külön könyvtár rá. A C++ támogatja a „virtuális kulcsszó” használatát ameddig az összehasolítandó JAVA nem teszi ezt meg. C++ nyelven az osztályok adattagjai előtt megadhatjuk a static kulcsszót, jelezve azt, hogy ezeket a tagokat megosztva használják az osztály objektumai. Java nyelv nem „áll” olyan közel a Hardwarerrel, mint a C++.Java nem támogatja az alapértelmezett argumentumokat míg a C++ nyelv igen. Javában nem lellhetőek fel a header fájlok,viszont a C++-ban igen. Elözőnél a kulcsszavak különféle osztályokat és módszereket tartalmaz. A JAVA nem támogatja a destruktorokat míg a C++ abban is „otthon van”. A Java sokkal hasznosabb memóriahasználat szempontjából mivel ha megpróbálok értéket rendelni az adott tömbön kívül akkor azonnal hibát kap vissza a programozó. C++-nál ez nem így van, ő megengedi az érték hozzárendelést viszont ezálltal több memóriát használva, de ez késöbb futási időnél visszacsaphat bugokkal illetve összeomlásokkal. Maga a Java lassabnak minősül a C++ nyelvnél. Mivel a C++ ahogy említettem bináris fájlokba át kódolja a forráskódot így az szinte azonnal lefut míg a JAVA fordít és „tolmácsol” is. Maga a szintaxis mindkettő nyelvben eléggé hasonló, operátorok(operátor túlterhelés nem), osztályok, meghatározó változok között elég sok hasonlóságot lehet felfedezni a két programnyelv között. Míg a C++ nyelvben a beviteli mechanizmus „in » SZÖVEG” és a kimenet „cout« SZÖVEG” addig a JAVA-nál a bemenet „System.in” és a kimenet pedig „System.out.println(SZÖVEG)”. Maga az egész C++ nyelv a C nyelvre épül. Sok olyan C-s program van ami C++ nyelven is lefut viszont akad jópár is ami már nem vagy esetleg máshogyan. A JAVA-nál ilyen nincs. Nincs előzetes nyelv viszont ahogy említettem a szintaxisa nagyban felfedezhető a C illetve C++ nyelvekből. Maga a felülete a C++ nyelvnél engedi a közvetlen system könyvtárak hívását ameddig a JAVA csak a JAVA.native felületen keresztül hívhat. A „többszörös öröklés” fellelhető a C++ nyelvnél. Ha esetleg mégis hiba lépne fel ez során akkor azért vannak a kulcsszavak(pl.:Többszörös öröklésnél). Javánál nincs ilyen. A kivételkezelés Java-ban eltérő mivel nincsenek destruktorok. Megkell határozni a try / catch funkciót ha a funkció deklarálja, hogy kivételt okozhat. C++ nyelvnél nincs ilyen még ha a funkció előre fel is veti a hibát. A könyvtáraiknál is eltérés van mivel a C++-nál legtöbbször alacson szintű a „funkcionalitás”. Ezzel szemben a JAVA-nál maga szintűek a szolgáltatások. JAVÁ-nál az összes funkció és adat osztályon belül létezik, míg a C++-nál osztályon kívül is. Maga a JAVA nyelvet leginkább android applikációknál használják. C++ nyelv legtöbbször „rendszer programozás”-nál fordulhat elő. 
         </para>
    </section>        

    <section>
        <title>Python</title>
        <para>
Python: Forstner Bertalan, Ekler Péter, Kelényi Imre: Bevezetés a mobilprogramozásba.
Gyors prototípus-fejlesztés Python és Java nyelven (35-51 oldal), a kijelölt oldalakból élmény-olvasónapló
        </para>
		<para>
            Maga a Python nyelv alapjait Guido Van Rossum tette le még 1990-ben. Ez egy magas szintű, dinamikus,objektumorientált és a JAVÁ-hoz hasonlóan platformfüggetlen azaz elérhető akár Windows, Unix, MacOS X vagy akár iPhone-nal is. Magát a fordítás fázist kilehet hagyni elég ha csak a forrást adjuk meg. Maga a nyelv az egy köztes nyelv azaz nincs szükség se fordításra se pedig linkelésre. A Python kódcsipetjei sokkal rövidebbek és tömörebbek mint például a JAVA vagy C++ nyelvnél. Ennek több oka is van például a magas szintű adattípusok lehetővé teszik, hogy összetett kifejezéseket írjunk le egy rövid állításban vagy a kódcsoportosítás egyszerű tagolással törnénik nincs szükség nyitó és záró jelzésekre. Egyik legfőbb jellemzője a Pythonnak, hogy behúzásalapú a szintaxis. Egy adott blokk végét egy kisebb behúzású sor jelzi, ezért lehet üres sor a blokkon belül.  A másik két nyelvttől eltérően egy utasítás a sor végéig tart(nem kell „;” jel), ha több sorba akarjuk ezt akkor a végén kell használnunk egy „\” jelet.  A token különböző fajtái : azonosító, kulcssszó, operátor, delimiter, literál. A kis illetve nagybetűket Pythonba megkell különböztetnünk. Jópár kulcsszó van jelen itt mint például : and,if, elif, else, in, break, try,or, while vagy még sorolhatnám.  Megjegyzéseket itt is tehetünk a „#” jel segítségével. Adattípusok lehetnek : számok, sztringek, ennesek(tuple), listák, szótárak. A nem létező változókra való hivatkozás futás közbeni kivételt okoz. A „print” segítségével írathatunk ki tetszőleges sztringet vagy más változót a konzolra. A nyelv támogatja az „if” (if,elif,else) elágazást is.Ciklusokra térve a jól megismert „for”, „while”, „range” is támogatja. Használatuk a C-hez hasonló. Pythonban a függvényeket a „def” kulcsszóval definiáljuk. Ahogy említettem ez a nyelv támogatja a klasszikus,objektumorientált fejlesztési eljárásokat is. Definiálhatunk osztályokat is. Osztályok lehetnek : objektumok illetve függvények. Egyes osztályok örökölhetnek más osztályokból is. A nyelv a fejlesztés megkönnyítése érdekében sok szabványos modult tartalmaz. Sok modul van mint például : felhasználói felület kezelés,hálózatkezelés,kamera kezelés. Ezenfelül a kivételeket is támogatja. Összefoglalva a Python kód részlete kevesebb mint a JAVA vagy akár a C++-nál használt kódokkal viszont tömörségileg ugyan ott van. Moduljai miatt nagyobb problémákat is meglehet oldani, nem hiába nevezik magas szintű programozásnak ezt a nyelvet. 
        </para>
    </section>  
        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
